The Fire Programming Language Guide
-----------------------------------
Fire is a reactive, stream based language, you program
in a data flow consisting of operations and ->'s.

** Printing Data **
-----------------------------------
@ out: prints the current stream and it's data.
- ex: push 5 -> push 1 -> out
 result: [5 1 ]

** Adding Data **
-----------------------------------
@ push (number): pushes one number onto end of stream.
- ex: push 5 -> out
 result: [5 ]
@ rng (n): pushes a stream of numbers from zero to n onto the stream.
- ex: rng 4 -> out
 result: [0 1 2 3 ]

** Reducing Data **
-----------------------------------
@ {+}: Sums all the numbers in the stream and store the result at the front.
- ex: rng 4 -> {+} -> out
 result: [6 ]
@ {-}: Subtracts all the numbers in the stream and store the result at the front.
- ex:
fire> rng 4 -> out -> {-} -> out
[0 1 2 3 ]
[-6 ]
@ {*}: Multiplies all the numbers in the stream and store the result at the front.
@ {/}: Divides all the numbers in the stream and store the result at the front.

** Mapping Data **
-----------------------------------
@ + (number): Adds some number to all numbers in the stream.
- ex:
fire> rng 4 -> out -> + 2 -> out
[0 1 2 3 ]
[2 3 4 5 ]
@ - (number): Subtracts some number from all numbers in the stream.
@ * (number): Multiplies each number in the stream.
@ / (number): Divides each number in the stream.
@ % (number): Calculates the remainder of each number of the stream by a number.
@ floor: Calculates and maps the floor of each number in the stream
- ex:
fire> rng 6 -> sin -> out -> floor -> out
[0 0.841471 0.909297 0.141120 -0.756802 -0.958924 ]
[0 0 0 0 -1 -1 ]
@ cos: Calculates and maps the cos of each number in the stream
@ sin: Calculates and maps the sin of each number in the stream
@ log: Calculates and maps the log(e) of each number in the stream
@ exp: Calculates and maps the (e)exp power of each number in the stream

** Filtering Data **
-----------------------------------
All filtering expressions in Fire begin with an 'if' keyword.
 Any element in the stream which holds false for the expression is removed from the string.

@ if == (number): Filters out all numbers not equal to (number) in the stream.
@ if != (number): Filters out all numbers equal to (number) in the stream.
@ if > (number): Filters out all numbers greater than (number) in the stream.
- ex:
fire> rng 20 -> if > 5 -> out
[6 7 8 9 10 11 12 13 14 15 16 17 18 19 ]
@ if < (number): Filters out all numbers less than (number) in the stream.
